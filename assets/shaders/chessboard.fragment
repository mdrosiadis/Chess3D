#version 330 core

// task define input variable from vertex shader
flat in int square_n;
in vec3 vertex_position_worldspace;
in vec3 vertex_position_cameraspace;
in vec3 vertex_normal_cameraspace;
in vec2 vertex_UV;
in vec4 vertex_position_lightspace; // shading

uniform sampler2D shadowMapSampler;
uniform sampler2D diffuseColorSampler;

uniform mat4 V;
uniform int selections[64];
uniform vec3 colors[2]; // black, white colors

const vec4 SELECTION_COLORS[5] = vec4[5](
    vec4(1.0f, 0.0f, 1.0f, 0.6f),                               // CURSOR
    vec4( 27.f / 255.f,  58.f / 255.f, 196.f / 255.f, 0.6f),    // MOVE_TARGETED
    vec4( 39.f / 255.f, 163.f / 255.f,   2.f / 255.f, 0.6f),    // SELECTED
    vec4(179.f / 255.f,  65.f / 255.f,   0.f / 255.f, 0.6f),    // CHECKED
    vec4(181.f / 255.f,  10.f / 255.f,   4.f / 255.f, 0.6f)     // CHECKMATED
);

out vec4 fragmentColor; 
// Phong 
// light properties
struct Light {
    vec4 La;
    vec4 Ld;
    vec4 Ls;
    vec3 lightPosition_worldspace;
    float power;
};

uniform Light light;
// task define output variable of the fragment color

void phong(float visibility);
float ShadowCalculation(vec4 fragPositionLightspace);

void main()
{
    // task assign color to fragment output variable 
	
    float shadow  = ShadowCalculation(vertex_position_lightspace);


    float visibility = 1.0f - shadow;
    phong(visibility);
}


float ShadowCalculation(vec4 vertexPositionLightspace){
    // Given the position of a fragment in lightspace coordinates
    // We sample the depth buffer to see whether or not the fragment is shadowed
    
    float shadow;

    // Task 4.3
    // Perspective devide to bring coordinates in range[-1, 1]
    // perspective correction
    vec3 projCoords = vertexPositionLightspace.xyz / vertexPositionLightspace.w;

    // Since the depth map values are in range[0, 1]
    projCoords = projCoords * 0.5 + 0.5; 

    // Sampling the closest point in this position from the depth map
    // REMINDER: Since we are in lightspace coordinates,
    //           the z parameter is the depth from the camera
    float currentDepth = projCoords.z;

    // Then we get the depth of the current vertex
    float closestDepth = texture(shadowMapSampler, projCoords.xy).r;

    // If the currentDepth is larger than the closestDepth, the fragment is shadowed
    // shadow = currentDepth > closestDepth ? 1.0f : 0.0f; 

    // Task 4.4
    // Correcting the quantization problem
    float bias = 0.005;
    // shadow = currentDepth - bias > closestDepth ? 1.0f : 0.0f; 
        

    // Task 4.7 Make the shadow edges more realistic
    shadow = 0.0;
    vec2 depthMap_dimensions = textureSize(shadowMapSampler, 0);
    vec2 texelSize = 1.0 / depthMap_dimensions;
    for(int x = -1; x <= 1; x++ ){
        for(int y = -1; y <= 1; y++ ){
            float pcfDepth = texture(shadowMapSampler, projCoords.xy + vec2(x, y) * texelSize).r;
            shadow += currentDepth - bias > pcfDepth ? 1.0 : 0.0; 
        }
    }
    shadow /= 9.0;


    // Task 4.5
    if(projCoords.z > 1.0)
        shadow = 0.0;


    return shadow;

}


void phong(float visibility) {

	vec3 c = colors[((square_n >> 3) ^ square_n) & 1];

	vec4 _Ks = vec4(0.1f, 0.1f, 0.1f, 1.0f); //vec4(texture(diffuseColorSampler, vertex_UV).rgb, 1.0);
	vec4 _Kd = (vec4(c, 0.8f) * texture(diffuseColorSampler, vertex_UV));
	vec4 _Ka = vec4(0.1, 0.1, 0.1, 1.0);
    float _Ns = 10;
    
    // model ambient intensity (Ia)
    vec4 Ia = light.La * _Ka;

    // model diffuse intensity (Id)
    vec3 N = normalize(vertex_normal_cameraspace); 
    vec3 L = normalize((V * vec4(light.lightPosition_worldspace, 1)).xyz - vertex_position_cameraspace);
    float cosTheta = clamp(dot(L, N), 0, 1);
    vec4 Id = light.Ld * _Kd * cosTheta; 

    // model specular intensity (Is)
    vec3 R = reflect(-L, N);
    vec3 E = normalize(- vertex_position_cameraspace);
    float cosAlpha = clamp(dot(E, R), 0, 1);
    float specular_factor = pow(cosAlpha, _Ns);
    vec4 Is = light.Ls * _Ks * specular_factor;

    //model the light distance effect
    float distance = length(light.lightPosition_worldspace - vertex_position_worldspace);
    float distance_sq = distance * distance;

    // final fragment color
    fragmentColor = vec4(
        Ia + 
        visibility * Id * light.power / distance_sq +   // Task 4.3 Use visibility
        visibility * Is * light.power / distance_sq);
    
    if(selections[square_n] != 0)
        fragmentColor = mix(fragmentColor, SELECTION_COLORS[selections[square_n]-1], 0.7);
    
}
